{"version":3,"sources":["parrot.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","require","createCanvas","useStyles","loadImage","makeStyles","theme","root","display","justifyContent","flexWrap","listStyle","padding","spacing","margin","chip","App","useState","parrot","file","setFile","cmWidth","setCmWidth","displayRatio","setDisplayRatio","canvasRef","useRef","parentCanvasWidth","setParentCanvasWidth","isDoneTiling","setIsDoneTiling","canvasParentRef","firstUpdate","csvData","setcsvData","hexInput","setHexInput","classes","chipData","setChipData","colorQuant","setColorQuant","isManual","setIsManual","isGrid","setIsGrid","finalUrl","setFinalUrl","isDoneExporting","setIsDoneExporting","useEffect","current","offsetWidth","img","Image","src","onload","hexColors","ColorThief","getPalette","map","rgb","x","hex","toString","length","join","hexObjs","color","key","Math","floor","random","label","toUpperCase","canvas","context","getContext","imgWidth","naturalWidth","ratio","naturalHeight","numDiceWidth","ceil","numDiceHeight","size","width","height","drawImage","imgPixels","getImageData","clearRect","data","indexRows","y","indexColumns","i","nearestColor","from","xnew","ynew","lineWidth","circle","Path2D","arc","PI","strokeStyle","stroke","push","shift","w","h","beginPath","moveTo","lineTo","autoMakeMosaic","fillColors","colorObj","alert","manualMakeMosaic","link","document","createElement","href","setAttribute","body","appendChild","click","parentNode","removeChild","className","Helmet","name","content","Typography","gutterBottom","variant","component","handleFiles","files","base64","Button","startIcon","FormControlLabel","control","Switch","checked","onChange","TextField","id","type","defaultValue","InputLabelProps","shrink","event","e","input","parseInt","target","value","onColorQtyChange","numberOfDice","parseFloat","toFixed","error","test","helperText","onClick","uid","Paper","Chip","icon","disabled","onDelete","chipToDelete","chips","filter","ref","Card","CardActionArea","CardContent","flat","CardActions","toDataURL","makeDownload","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5fbf756d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/parrot.5aa922c0.jpg\";","import React, { useState, useRef, useEffect} from 'react';\nimport ReactFileReader from 'react-file-reader';\nimport './App.css';\nimport './AppMobile.css';\nimport { Button } from '@material-ui/core';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport TextField from '@material-ui/core/TextField';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';  \nimport {Helmet} from 'react-helmet'\nimport Chip from '@material-ui/core/Chip';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport ColorThief from '../node_modules/colorthief/dist/color-thief.mjs';\nimport parrot from './parrot.jpg'\nconst { createCanvas, loadImage } = require('canvas')\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    listStyle: 'none',\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  chip: {\n    margin: theme.spacing(0.5),\n  },\n}));\n\n \nfunction App() {\n  \n  let [file, setFile] = useState(parrot)\n  let [cmWidth,setCmWidth] = useState(232)\n  let [displayRatio,setDisplayRatio] = useState(1)\n  const canvasRef = useRef(null)\n  let [parentCanvasWidth,setParentCanvasWidth] = useState(800)\n  let [isDoneTiling,setIsDoneTiling] = useState(true)\n  const canvasParentRef = useRef(null);\n  const firstUpdate = useRef(true);\n  let [csvData,setcsvData] = useState([])\n  let [hexInput,setHexInput] = useState('#')\n  const classes = useStyles();\n  const [chipData, setChipData] = useState([]); \n  const [colorQuant, setColorQuant] = useState(20); \n  const [isManual, setIsManual] = useState(false);\n  const [isGrid, setIsGrid] = useState(true)\n  const [finalUrl, setFinalUrl] = useState('placeholder')\n  let [isDoneExporting,setIsDoneExporting] = useState(true)\n  \n\n  //removes a chip if it is deleted by the user\n  const handleDelete = (chipToDelete) => () => {\n    setChipData((chips) => chips.filter((chip) => chip.key !== chipToDelete.key));\n  };\n  //tracks what is being typed in the hex field\n  const onHexInputChange = (e) => {\n    setHexInput(e.target.value)\n  }\n  \n  //onclick function for the add button to add the hex code to the chip array\n  const hexPush = () => {\n    if(/^#([0-9A-F]{3}){1,2}$/i.test(hexInput)){\n      let uid = Math.floor((Math.random())*100000000)\n      setChipData([...chipData, {key: uid, label: hexInput}])\n      // let updated = colorQuant + 1\n      // setColorQuant(updated)\n    }\n  }\n  //handles the dice in the input field and updates cmwidth,which then calls the dicemaker function\n  const onChange = (e) => {\n    let numberOfDice\n    //checks input is an integer\n    let input = parseInt(e.target.value)\n    //too many dice alert\n    if(input>=500) {alert('Please enter a number less than 500')}\n    //if input is an integer and less than 200\n    input < 500 && input  > 0 ? numberOfDice = input : numberOfDice = 1\n    setCmWidth(parseFloat((numberOfDice*1.6).toFixed(1)))\n  }\n  //\n  const onColorQtyChange = (e) => {\n    let input = parseInt(e.target.value)\n    input > 0 ? setColorQuant(input) : alert('Please enter a number greater than 1')\n\n  }\n  const handleChange = () => {\n    setIsManual(isManual ? false : true);\n  };\n  //loads the files initially and stores src\n  const handleFiles = files => {\n    const img = new Image()\n    img.src = files.base64\n    setFile(img.src)\n  }\n\n  const manualMakeMosaic = () => {\n    //adjust canvas size to based on screen width (smaller for mobile)\n    setParentCanvasWidth(canvasParentRef.current ? canvasParentRef.current.offsetWidth : 0)\n    //if there's at least two colors in chip array\n    if(chipData.length > 1){\n      //start the 'tiling...' message\n      setIsDoneTiling(false)\n      const img = new Image()\n      img.src = file\n      img.onload = () => {\n        //creating the canvas for photomosaic\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d')\n        let imgWidth = img.naturalWidth\n        let imgHeight = img.naturalHeight\n        //ratio needed to calculate length of the mosiac\n        let ratio = imgHeight/imgWidth\n        //needed to update the text displayed for length in return statement\n        setDisplayRatio(ratio)\n        //dice are 1.6 cm wide, cmWidth is the default number used to calc mosiac size in cms\n        let numDiceWidth = Math.ceil(cmWidth / 1.6)\n        let numDiceHeight = Math.ceil(ratio * cmWidth / 1.6)\n        //needed to calculate the size of the dice images in context of the canvas width\n      \n        let size = Math.ceil(parentCanvasWidth / numDiceWidth)\n        //sets canvas size to expected dimensions of mosiac\n        canvas.width = size * numDiceWidth\n        canvas.height = size * numDiceHeight\n        //reduce image to size where 1 pixel = 1 die\n        context.drawImage(img,0,0,numDiceWidth,numDiceHeight);\n        //place reduced image into array for the for loop\n        let imgPixels = context.getImageData(0, 0, numDiceWidth, numDiceHeight);\n        //clears canvas of the drawn image\n        context.clearRect(0, 0, numDiceWidth, numDiceHeight);\n        //makes it so you dont need to type impixels.data in the for loop\n        let data = imgPixels.data\n        let indexRows = []\n        for(let y = 0; y < imgPixels.height; y++){\n          let indexColumns = []\n          for(let x = 0; x < imgPixels.width; x++){\n          //find current row by calc-ing the length and the current count\n          let currentRow = (4 * imgPixels.width) * y \n          // find current index within the row\n          let currentPixelInRow = (x * 4)\n          // sum both in order to find your index in the current row\n          let i = currentRow + currentPixelInRow\n          //getting the RGB\n          let r = data[i]\n          let g = data[i+1]\n          let b = data[i+2]\n          //convert RGB to hex\n          let hex = '#' + [r, g, b].map(x => {\n            const hex = x.toString(16)\n            return hex.length === 1 ? '0' + hex : hex\n          }).join('')\n          //create array of tile colors\n          let fillColors = chipData.map(colorObj => colorObj.label);\n          //set up function to find nearest color from provided tile array\n          let nearestColor = require('nearest-color').from(fillColors);\n          //calculates postion of dice based on x and y in for loop\n          let xnew = x * size\n          let ynew = y * size\n          //draws dice image at the desired locations\n          let lineWidth = Math.floor(size/2.25) > 0 ?  Math.floor(size/2.25) : 1\n          let circle  = new Path2D()\n          circle.arc(xnew+(size/2), ynew+(size/2), (size/2)-(lineWidth/2), 0, 2 * Math.PI, false)\n          context.lineWidth = lineWidth\n          context.strokeStyle = nearestColor(hex)\n          context.stroke(circle)\n\n          //adds the hex to the csv row\n          indexColumns.push(nearestColor(hex))\n        }\n        //adds row of hex values to the csvData array (each row is a row in a csv)\n        indexRows.push(indexColumns)\n      }\n      //this sets the csvData variable to the data created from the most recent tiling\n      setIsDoneTiling(true)\n      setcsvData(indexRows)\n\n      if(isGrid){\n        let shift = size * 29 \n        let w = size * numDiceWidth\n        let h = size * numDiceHeight\n        context.strokeStyle = '#00008B'\n        context.beginPath()\n        for (let x = shift; x < w; x += shift) {\n\t\t\t\t\tcontext.moveTo(x,0)\n\t\t\t\t\tcontext.lineTo(x,h)\n\t\t\t\t}\n        for (let y = shift; y < h; y += shift) {\n\t\t\t\t\tcontext.moveTo(0,y)\n\t\t\t\t\tcontext.lineTo(w,y)\n        }\n        context.lineWidth = 1\n        context.stroke()\n      }\n      \n      }\n      //this deactivates the 'tiling...' message after the for loop is done\n    }\n    else{\n      alert('Please add at least two colors')\n    }\n          \n    \n  }\n  const autoMakeMosaic = () =>  {\n    //adjust canvas size to based on screen width (smaller for mobile)\n    setParentCanvasWidth(canvasParentRef.current ? canvasParentRef.current.offsetWidth : 0)\n    //if there's at least two colors in chip array\n    if(colorQuant > 1){\n      //start the 'tiling...' message\n      setIsDoneTiling(false)\n      \n      \n      const img = new Image()\n      img.src = file\n      img.onload = () => {\n        const colorThief = new ColorThief()\n        const rgbColors =  colorThief.getPalette(img,colorQuant)\n        let hexColors = rgbColors.map(rgb => {\n            return( '#' + rgb.map(x => {\n              const hex = x.toString(16)\n              return hex.length === 1 ? '0' + hex : hex\n            }).join(''))\n        })\n        let hexObjs = hexColors.map(color => {\n          return (\n            {\n              key: Math.floor(Math.random() * Math.floor(100000)),\n              label: color.toUpperCase()\n            }\n          )\n        })\n        //creating the canvas for photomosaic\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d')\n        let imgWidth = img.naturalWidth\n        let imgHeight = img.naturalHeight\n        //ratio needed to calculate length of the mosiac\n        let ratio = imgHeight/imgWidth\n        //needed to update the text displayed for length in return statement\n        setDisplayRatio(ratio)\n        //dice are 1.6 cm wide, cmWidth is the default number used to calc mosiac size in cms\n        let numDiceWidth = Math.ceil(cmWidth / 1.6)\n        let numDiceHeight = Math.ceil(ratio * cmWidth / 1.6)\n        //needed to calculate the size of the dice images in context of the canvas width\n      \n        let size = Math.ceil(parentCanvasWidth / numDiceWidth)\n        //sets canvas size to expected dimensions of mosiac\n        canvas.width = size * numDiceWidth\n        canvas.height = size * numDiceHeight\n        //reduce image to size where 1 pixel = 1 die\n        context.drawImage(img,0,0,numDiceWidth,numDiceHeight);\n        //place reduced image into array for the for loop\n        let imgPixels = context.getImageData(0, 0, numDiceWidth, numDiceHeight);\n        //clears canvas of the drawn image\n        context.clearRect(0, 0, numDiceWidth, numDiceHeight);\n        //makes it so you dont need to type impixels.data in the for loop\n        let data = imgPixels.data\n        let indexRows = []\n        for(let y = 0; y < imgPixels.height; y++){\n          let indexColumns = []\n          for(let x = 0; x < imgPixels.width; x++){\n          //find current row by calc-ing the length and the current count\n          let currentRow = (4 * imgPixels.width) * y \n          // find current index within the row\n          let currentPixelInRow = (x * 4)\n          // sum both in order to find your index in the current row\n          let i = currentRow + currentPixelInRow\n          //getting the RGB\n          let r = data[i]\n          let g = data[i+1]\n          let b = data[i+2]\n          //convert RGB to hex\n          let hex = '#' + [r, g, b].map(x => {\n            const hex = x.toString(16)\n            return hex.length === 1 ? '0' + hex : hex\n          }).join('')\n          //create array of tile colors\n          // let fillColors = chipData.map(colorObj => colorObj.label);\n          \n          //set up function to find nearest color from provided tile array\n          let nearestColor = require('nearest-color').from(hexColors);\n          //calculates postion of dice based on x and y in for loop\n          let xnew = x * size\n          let ynew = y * size\n          //draws dice image at the desired locations\n          let lineWidth = Math.floor(size/2.25) > 0 ?  Math.floor(size/2.25) : 1\n          let circle  = new Path2D()\n          circle.arc(xnew+(size/2), ynew+(size/2), (size/2)-(lineWidth/2), 0, 2 * Math.PI, false)\n          context.lineWidth = lineWidth\n          context.strokeStyle = nearestColor(hex)\n          context.stroke(circle)\n          //adds the hex to the csv row\n          indexColumns.push(nearestColor(hex))\n        }\n        //adds row of hex values to the csvData array (each row is a row in a csv)\n        indexRows.push(indexColumns)\n      }\n      //this sets the csvData variable to the data created from the most recent tiling\n      setChipData(hexObjs)\n      setcsvData(indexRows)\n      //this deactivates the 'tiling...' message after the for loop is done\n      setIsDoneTiling(true)\n\n      if(isGrid){\n        let shift = size * 29 \n        let w = size * numDiceWidth\n        let h = size * numDiceHeight\n        context.strokeStyle = '#00008B'\n        context.beginPath()\n        for (let x = shift; x < w; x += shift) {\n\t\t\t\t\tcontext.moveTo(x,0)\n\t\t\t\t\tcontext.lineTo(x,h)\n\t\t\t\t}\n        for (let y = shift; y < h; y += shift) {\n\t\t\t\t\tcontext.moveTo(0,y)\n\t\t\t\t\tcontext.lineTo(w,y)\n        }\n        context.lineWidth = 1\n        context.stroke()\n      }\n      }\n    }\t\t\n  }\n\n\n  //monitors changes in any of the variables in the array and calls the dice mosiac maker\n  useEffect( () => {\n    // if(firstUpdate.current) {\n    //   //ensures that create preview isn't called during the first loading of the components when there is no image file yet\n    //   firstUpdate.current = false;\n    //   }\n    // else {\n      if(!isManual){\n        autoMakeMosaic()\n      }\n    // }\n  }, [file,colorQuant,cmWidth,parentCanvasWidth,isManual,isGrid]) \n\n  useEffect( () => {\n    if(firstUpdate.current) {\n      //ensures that create preview isn't called during the first loading of the components when there is no image file yet\n      firstUpdate.current = false;\n      }\n    else {\n      if(isManual){\n        manualMakeMosaic()\n      }\n    }\n  }, [file,cmWidth,parentCanvasWidth, isManual, chipData]) \n\n  const makeDownload = () => {\n\n    if(colorQuant > 1){\n      setIsDoneExporting(false)\n      //start the 'tiling...' message\n      const img = new Image()\n      img.src = file\n      img.onload = () => {\n        const colorThief = new ColorThief()\n        const rgbColors =  colorThief.getPalette(img,colorQuant)\n        let hexColors = rgbColors.map(rgb => {\n            return( '#' + rgb.map(x => {\n              const hex = x.toString(16)\n              return hex.length === 1 ? '0' + hex : hex\n            }).join(''))\n        })\n        //creating the canvas for photomosaic\n        let imgWidth = img.naturalWidth\n        let imgHeight = img.naturalHeight\n        \n        //ratio needed to calculate length of the mosiac\n        let ratio = imgHeight/imgWidth\n        //needed to update the text displayed for length in return statement\n\n        //dice are 1.6 cm wide, cmWidth is the default number used to calc mosiac size in cms\n        let numDiceWidth = Math.ceil(cmWidth / 1.6)\n        let numDiceHeight = Math.ceil(ratio * cmWidth / 1.6) \n\n        const canvas = createCanvas(numDiceWidth, numDiceHeight)\n        const context = canvas.getContext('2d')\n        //needed to calculate the size of the dice images in context of the canvas width\n        let size = 50\n        //sets canvas size to expected dimensions of mosiac\n        canvas.width = size * numDiceWidth\n        canvas.height = size * numDiceHeight\n        //reduce image to size where 1 pixel = 1 die\n        context.drawImage(img,0,0,numDiceWidth,numDiceHeight);\n        //place reduced image into array for the for loop\n        let imgPixels = context.getImageData(0, 0, numDiceWidth, numDiceHeight);\n        //clears canvas of the drawn image\n        context.clearRect(0, 0, numDiceWidth, numDiceHeight);\n        //makes it so you dont need to type impixels.data in the for loop\n        let data = imgPixels.data\n        let indexRows = []\n        for(let y = 0; y < imgPixels.height; y++){\n          let indexColumns = []\n          for(let x = 0; x < imgPixels.width; x++){\n          //find current row by calc-ing the length and the current count\n          let currentRow = (4 * imgPixels.width) * y \n          // find current index within the row\n          let currentPixelInRow = (x * 4)\n          // sum both in order to find your index in the current row\n          let i = currentRow + currentPixelInRow\n          //getting the RGB\n          let r = data[i]\n          let g = data[i+1]\n          let b = data[i+2]\n          //convert RGB to hex\n          let hex = '#' + [r, g, b].map(x => {\n            const hex = x.toString(16)\n            return hex.length === 1 ? '0' + hex : hex\n          }).join('')\n          //create array of tile colors\n          // let fillColors = chipData.map(colorObj => colorObj.label);\n          let lineWidth = Math.floor(size/2.25) > 0 ?  Math.floor(size/2.25) : 1\n          //set up function to find nearest color from provided tile array\n          let nearestColor = require('nearest-color').from(hexColors);\n          //calculates postion of dice based on x and y in for loop\n          let xnew = x * size \n          let ynew = y * size\n          //draws dice image at the desired locations\n          let circle  = new Path2D()\n          circle.arc(xnew+(size/2), ynew+(size/2), (size/2)-(lineWidth/2), 0, 2 * Math.PI, false)\n          context.lineWidth = lineWidth\n          context.strokeStyle = nearestColor(hex)\n          context.stroke(circle)\n        }\n      }\n      if(isGrid){\n        let shift = size * 29 \n        let w = size * numDiceWidth\n        let h = size * numDiceHeight\n        context.strokeStyle = 'black'\n        context.beginPath()\n        for (let x = shift; x < w; x += shift) {\n\t\t\t\t\tcontext.moveTo(x,0)\n\t\t\t\t\tcontext.lineTo(x,h)\n\t\t\t\t}\n        for (let y = shift; y < h; y += shift) {\n\t\t\t\t\tcontext.moveTo(0,y)\n\t\t\t\t\tcontext.lineTo(w,y)\n        }\n        context.lineWidth = 15\n        context.stroke()\n      }\n      setFinalUrl(canvas.toDataURL(\"image/jpg\"));\n      }\n    }\t\t\n}\n\nuseEffect(()=> {\n  if(finalUrl !== 'placeholder') {\n    setIsDoneExporting(true)\n    const link = document.createElement('a');\n    link.href = finalUrl;\n    link.setAttribute('download', 'file.png');\n    document.body.appendChild(link);\n    link.click();\n    link.parentNode.removeChild(link);\n  }\n}, [finalUrl])\n\n    return (\n      <div className='grid-container'>\n        <Helmet>\n        <title>Perler Maker: A Generator to Create and Export Bead Art</title>\n        <meta name=\"description\" content=\"Upload photos and easily convert them into perler bead mosiacs. Choose colors to represent your beads. Adjust the number of beads in your mosiac. Export your design as an image.\" />\n        </Helmet>\n  \n      <div className='uploadArea'>\n        <div className=\"logo\">\n              <Typography className='logoTitle' gutterBottom variant=\"h3\" component=\"h3\" color='primary'>\n                Perler Maker |\n              </Typography>\n              <Typography className='logoDescription' gutterBottom variant=\"h5\" component=\"h5\" color='primary'>\n                Create, Export Bead Art\n              </Typography>\n        </div>\n        <div className='upload'>\n          <ReactFileReader handleFiles={handleFiles} base64={true}>\n              <Button\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<CloudUploadIcon />}\n            >\n              Upload\n          </Button>\n          </ReactFileReader>\n        </div>\n        <div className='toggle'>\n          <FormControlLabel\n          control={<Switch checked={isManual} onChange={handleChange} name=\"checkedA\" />}\n          label=\"Edit Colors\"/>\n        </div>\n        {/* inputColorQTY */}\n        {!isManual && <div className='position2'>\n          <TextField\n          id=\"outlined-number\"\n          label=\"Colors\"\n          type=\"number\"\n          defaultValue='20'\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant=\"outlined\"\n          onChange={(event) => onColorQtyChange(event)}\n           />\n        </div>}\n        <div className='inputTile'>\n          <TextField\n          id=\"outlined-number\"\n          label=\"Beads\"\n          type=\"number\"\n          defaultValue='145'\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant=\"outlined\"\n          onChange={(event) => onChange(event)}\n           />\n        </div>\n        {/* hexInput */}\n        {isManual && <div className='position1'>\n        <TextField id=\"hex\" label=\"Hex\" name=\"hex\"\n          value={hexInput}\n          onChange={(event) =>  onHexInputChange(event)}\n          error={hexInput!=='#' && !/^#([0-9A-F]{3}){1,2}$/i.test(hexInput)}\n          helperText={hexInput!=='#' && !/^#([0-9A-F]{3}){1,2}$/i.test(hexInput) ? 'Invalid hex.' : ' '}\n          variant=\"outlined\"\n        />\n      </div>}\n      {/* hexButton */}\n        {isManual && <div className='position2'>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick= {hexPush}\n            >\n              Add\n            </Button>\n        </div>}\n        <div className='hex'>\n            <Paper id='hexChild' component=\"ul\" className={classes.root} >\n            {chipData.map((data) => {\n              \n              return (\n                <li key={data.key}>\n                  <Chip\n                    icon={<input className = 'color' type=\"color\" disabled value={data.label}></input>}\n                    label={data.label}\n                    onDelete={isManual ? handleDelete(data) : null}\n                    className={classes.chip}\n                  />\n                </li>\n              );\n            })}\n            </Paper>\n        </div>\n      </div>\n     \n      <div className='widthInfoArea'>\n          \n      <div className='gridToggle'>\n          <FormControlLabel\n          control={<Switch checked={isGrid} onChange={() => setIsGrid(isGrid ? false : true)} name=\"checkedA\" />}\n          label=\"Grid\"/>\n        </div>\n\n      {!isDoneTiling && file ?  \n            <Typography className='loadingInfo' variant=\"body1\" color=\"textSecondary\" component=\"p\">\n              Beading...\n            </Typography> : \n\n            <div></div>\n      }\n\n        <div className='widthInfo'>\n       \n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\n            {Math.ceil(cmWidth / 1.6)} beads\n          </Typography>\n        </div>\n      \n      </div>\n      <div className='lengthInfo'>\n        <div className='length'>\n        <Typography variant=\"body1\" id=\"rotate-text\" color=\"textSecondary\" component=\"p\">\n          {Math.ceil(displayRatio * cmWidth / 1.6)} beads\n        </Typography>\n        </div>\n      </div>\n\n      <div ref={canvasParentRef} className ='imgParent'>\n        <Card >\n          <CardActionArea >\n          <canvas ref={canvasRef}/> \n            <CardContent>\n              <Typography variant=\"h6\" color=\"textSecondary\" component=\"h6\">\n                {Math.ceil(cmWidth / 1.6)*Math.ceil(displayRatio * cmWidth / 1.6)} beads\n              </Typography>\n              {csvData.length>0 ? chipData.map(chip => {\n\n               return <div key={chip.key} className='tileCount'>\n                      <input className = 'color' type=\"color\" disabled value={chip.label}></input>\n                      <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\n                        {chip.label}, {csvData.flat().filter(x => x.toUpperCase() === chip.label).length} beads \n                      </Typography>\n                      </div>\n              })\n               : <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\n                  Upload a photo, adjust number of beads and colors, add desired hex codes.\n                 </Typography>}\n            </CardContent>\n          </CardActionArea>\n          <CardActions>\n            <Button size=\"small\" onClick={() => makeDownload()} color=\"primary\" target=\"_blank\">\n              { isDoneExporting ? 'Export' : 'Exporting, please wait...'}\n            </Button>\n            <Button size=\"small\" color=\"primary\" href=\"https://taylorepskamp.github.io/diceify/\" target='_blank'>\n              Dice Mosaic App\n            </Button>\n          </CardActions>\n        </Card>\n      </div>\n    </div>\n    \n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}